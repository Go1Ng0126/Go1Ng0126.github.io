<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序模板</title>
      <link href="/2023/06/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/06/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序模板"><a href="#快速排序模板" class="headerlink" title="快速排序模板"></a>快速排序模板</h1><h2 id="选定分界点，可以是l-r-l-r-2等"><a href="#选定分界点，可以是l-r-l-r-2等" class="headerlink" title="选定分界点，可以是l,r,l+r/2等"></a>选定分界点，可以是l,r,l+r/2等</h2><h2 id="维护数组-使得分界点左边都-lt-分界点，右边都-gt-分界点"><a href="#维护数组-使得分界点左边都-lt-分界点，右边都-gt-分界点" class="headerlink" title="维护数组 使得分界点左边都&lt;=分界点，右边都&gt;=分界点"></a>维护数组 使得分界点左边都&lt;=分界点，右边都&gt;=分界点</h2><h2 id="递归处理左右两边数组"><a href="#递归处理左右两边数组" class="headerlink" title="递归处理左右两边数组"></a>递归处理左右两边数组</h2><h2 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ios ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, t;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort1</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//边界不满足左边小，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//第一步，确定边界</span></span><br><span class="line">    <span class="comment">//tips1：由于i和j都是先自减或自增后判断，初始时i、j往边界两端扩一步</span></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j =  r + <span class="number">1</span>, x = q[l];</span><br><span class="line">    <span class="comment">//第二步，划分区间，使得一边小于x，一边大于x；</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三步，递归处理两边</span></span><br><span class="line">    <span class="built_in">quick_sort1</span>(q, l, j), <span class="built_in">quick_sort1</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios;</span><br><span class="line">    <span class="type">int</span> a[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="comment">//scanf比cin快哦</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort1</span>( a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法小tips(蒟蒻勿喷)</title>
      <link href="/2023/05/31/%E7%AE%97%E6%B3%95%E5%B0%8Ftips/"/>
      <url>/2023/05/31/%E7%AE%97%E6%B3%95%E5%B0%8Ftips/</url>
      
        <content type="html"><![CDATA[<h1 id="遍历从2到sqrt-n-或n-i-的原因"><a href="#遍历从2到sqrt-n-或n-i-的原因" class="headerlink" title="遍历从2到sqrt(n)或n / i 的原因"></a><code>遍历从2到sqrt(n)或n / i 的原因</code></h1><h2 id="（1-判断一个自然数是否是质数，只用看从-2-到-sqrt-n-是否能整除-N。-2-从小到大求某个数的约数）"><a href="#（1-判断一个自然数是否是质数，只用看从-2-到-sqrt-n-是否能整除-N。-2-从小到大求某个数的约数）" class="headerlink" title="（1. 判断一个自然数是否是质数，只用看从 2 到 $\sqrt[]{n}$ 是否能整除 N。   2. 从小到大求某个数的约数）"></a>（1. 判断一个自然数是否是质数，只用看从 2 到 $\sqrt[]{n}$ 是否能整除 N。   2. 从小到大求某个数的约数）</h2><ul><li>首先，<code>约数是成对出现的</code>。比如$24$,你找到个约数$3$,那么一定有个约数8,因为 $24/3=8$ .</li><li><p>然后，这对约数必须一个在根号n之前，一个在根号n之后。因为都在根号n之前的话，<br>乘积一定小于 $ n $（ $ \sqrt[]{n}*\sqrt[]{n}= n$ ），同样，都在 $ \sqrt[]{n} $ 之后的话，乘积一定大于 $ n $。</p></li><li><p>所以，如果你在 $ \sqrt[]{n} $ 之前都找不到约数的话，那么 $ \sqrt[]{n} $ 之后就不会有了。同样，都在 $ \sqrt[]{n} $之后的话，乘积一定大于 $ n $ 。</p></li></ul><h3 id="所以，如果你在根号n之前都找不到约数的话，那么-sqrt-n-之后就不会有了"><a href="#所以，如果你在根号n之前都找不到约数的话，那么-sqrt-n-之后就不会有了" class="headerlink" title="所以，如果你在根号n之前都找不到约数的话，那么 $ \sqrt[]{n} $之后就不会有了"></a>所以，如果你在根号n之前都找不到约数的话，那么 $ \sqrt[]{n} $之后就不会有了</h3><h1 id="string-amp-char"><a href="#string-amp-char" class="headerlink" title="string&amp;char*"></a><code>string</code>&amp;<code>char*</code></h1><ul><li><p>string很方便，会根据输入的给定字符串相应的储存空间</p></li><li><p>string的内存管理是由系统处理，除非系统内存池用完，不然不会出现这种内存问题。</p></li><li>char *的内存管理由用户自己处理，很容易出现内存不足的问题。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><ol><li><p>与char不同的是，string不一定以NULL结束。string长度可以根据length()得到，string可以根据下标访问。所以，、不能将string直接赋值给char。</p></li><li><p>当我们定义了一个string，就不能用scanf和printf输入输出。主要是因为%s要求后面是对象的首地址。即char *。（同理不能用sscanf和sprintf）</p></li></ol><h3 id="C-string类型不能用memset"><a href="#C-string类型不能用memset" class="headerlink" title="C++ string类型不能用memset"></a>C++ string类型不能用memset</h3><ul><li><p>string类型不能用 memset ，否则memset会破坏string本身的结构，导致在之后对string对象进行操作时，会引发内存分配的动作, 而这实际上是不应该发生的（应该直接使用string本身的内存而不是新申请内存块），分配的内存没有释放， 这样做的结果是会导致内存泄露。</p></li><li><p><a href="https://blog.csdn.net/faihung/article/details/119325390">sscanf详解</a></p></li><li><a href="https://blog.csdn.net/weixin_42073412/article/details/100866966?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167169005816800217086659%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167169005816800217086659&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-100866966-null-null.142%5ev68%5econtrol,201%5ev4%5eadd_ask,213%5ev2%5et3_esquery_v2&amp;utm_term=sprintf&amp;spm=1018.2226.3001.4187">C 字符串函数 sprintf / snprintf 详解</a></li></ul><h1 id="Find函数"><a href="#Find函数" class="headerlink" title="Find函数"></a><code>Find函数</code></h1><ul><li><code>algorithm</code>中的<code>find</code>函数<br>  返回值是目标元素的下标，找不到时返回值为迭代器结尾<br>  string = “hello”;<br>  find(s.begin(), s.end(), ‘o’) == s.end()</li><li><code>string</code>中的与find相关函数<br>  <code>find( )</code>       <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string str1, str2;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">str1.<span class="built_in">find</span>(str2);<span class="comment">//从串str1中查找时str2，返回str2中首个字符在str1中的地址</span></span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">find</span>(str2,<span class="number">5</span>);<span class="comment">//从str1的第5个字符开始查找str2</span></span><br><span class="line">   </span><br><span class="line">str1.<span class="built_in">find</span>(c);<span class="comment">//在str1中查找字符o并返回第一个查找到的地址</span></span><br><span class="line">   </span><br><span class="line">       str1.<span class="built_in">find</span>(<span class="string">&quot;str2&quot;</span>,<span class="number">2</span> , <span class="number">2</span>);<span class="comment">//从str1中的第二个字符开始查找of big的前两个字符</span></span><br></pre></td></tr></table></figure></li></ul><p>原文链接：<a href="https://blog.csdn.net/qq_43469554/article/details/97284604">https://blog.csdn.net/qq_43469554/article/details/97284604</a><br><strong>E.G.</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str,ss;</span><br><span class="line">str.<span class="built_in">find</span>(ss);<span class="comment">//返回字符串 ss 在 str 的位置</span></span><br><span class="line">str.<span class="built_in">find</span>(ss, num);<span class="comment">//在 str[num]~str[n-1] 范围内查找并返回字符串 ss 在 str 的位置</span></span><br><span class="line">str.<span class="built_in">rfind</span>(ss, num);<span class="comment">//在 str[0]~str[num] 范围内查找并返回字符串 ss在 str 的位置</span></span><br></pre></td></tr></table></figure></p><h1 id="静态链表（节约时间，提前申请空间）"><a href="#静态链表（节约时间，提前申请空间）" class="headerlink" title="静态链表（节约时间，提前申请空间）"></a>静态链表（节约时间，提前申请空间）</h1><h2 id="例题-题面应该记得-，我就不再赘述了"><a href="#例题-题面应该记得-，我就不再赘述了" class="headerlink" title="例题 题面应该记得 ，我就不再赘述了"></a>例题 <code>题面应该记得 ，我就不再赘述了</code></h2><ul><li>H x 表示向链表头插入 x</li><li>D k 表示删除第k个插入的数后面的数（k=0，表示删除头结点）。</li><li>I k x 表示在第k个插入的数后面插入一个数x（此操作k均大于0）。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="comment">//#define int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ios ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000050</span></span><br><span class="line"><span class="type">int</span> e[N],ne[N],idx=<span class="number">0</span>,head=<span class="number">-1</span>;<span class="comment">//head初始化指向-1，即类似于指向null，这样只要插入数据末尾的数的ne[i]都会是-1(都指向结束)</span></span><br><span class="line"><span class="comment">//idx是结点，结点要自增，一个结点存一个值，链表顺序由指向关系决定</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_head</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">e[idx]=x,ne[idx]=head,head = idx,idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">e[idx]=x,ne[idx]=ne[k],ne[k]=idx,idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span>)&#123;</span><br><span class="line">head=ne[head];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ne[k]=ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m,k,x;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span> (m--)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&quot;H&quot;</span>)&#123;</span><br><span class="line">cin&gt;&gt; x;</span><br><span class="line"><span class="built_in">insert_head</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&quot;I&quot;</span>)&#123;</span><br><span class="line">cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line"><span class="built_in">insert</span>(k<span class="number">-1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&quot;D&quot;</span>)&#123;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="built_in">remove</span>(k<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head;i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">cout&lt;&lt;e[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树经典题"><a href="#二叉树经典题" class="headerlink" title="二叉树经典题"></a>二叉树经典题</h1><h2 id="已知先序中序求后序"><a href="#已知先序中序求后序" class="headerlink" title="已知先序中序求后序"></a>已知先序中序求后序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ios ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10050</span></span><br><span class="line"><span class="type">int</span> n , a[<span class="number">105</span>],b[<span class="number">105</span>],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l1, <span class="type">int</span> r1 ,<span class="type">int</span> l2,<span class="type">int</span> r2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l1 &gt; r1 || l2 &gt; r2) <span class="keyword">return</span> ;<span class="comment">//递归边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = l2 ;i &lt;= r2; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[l1] == b[i])&#123;<span class="comment">//a[l1]是根结点¸该操作为在中序遍历中找根结点</span></span><br><span class="line"><span class="built_in">dfs</span>(l1+<span class="number">1</span>,i+l1-l2,l2,i<span class="number">-1</span>);<span class="comment">//遍历左子树</span></span><br><span class="line"><span class="built_in">dfs</span>(i+l1-l2+<span class="number">1</span>,r1,i+<span class="number">1</span>,r2);<span class="comment">//右子树</span></span><br><span class="line"><span class="comment">//遍历到最深的左子树输出然后输出右子树，再输出这组数的根（也就是根节点的左子树的根，类似的一步一步输出右子树）</span></span><br><span class="line"><span class="keyword">if</span>( cnt == <span class="number">1</span>)cout &lt;&lt; a[l1];</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[l1];</span><br><span class="line">cnt++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((cin&gt;&gt;n)&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cnt = <span class="number">1</span>;<span class="comment">//ÖØÖÃcnt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1 2 4 5 3 6 7</span></span><br><span class="line"><span class="comment">4 2 5 1 6 3 7</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">3 2 4 1 6 5 7</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">4 5 2 6 7 3 1</span></span><br><span class="line"><span class="comment">3 4 2 6 7 5 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="c-str-函数"><a href="#c-str-函数" class="headerlink" title="c_str()函数"></a>c_str()函数</h1><p>功能：c_str() 函数可以将 const string<em> 类型 转化为 const char</em> 类型<br>头文件为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>c_str()就是将C++的string转化为C的字符串数组，c_str()生成一个const char *指针，指向字符串的首地址</p><p>因为在c语言中没有string类型，必须通过string类对象的成员函数 c_str() 把 string 转换成c中的字符串样式</p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h4><p>c_str() 这个函数转换后返回的是一个临时指针，不能对其进行操作<br>所以因为这个数据是临时的，所以当有一个改变这些数据的成员函数被调用后，该数据就会改变失效；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s.<span class="built_in">c_str</span>());<span class="comment">//s为string定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>————————————————</p><p>原文链接：<a href="https://blog.csdn.net/YXXXYX/article/details/119957061">https://blog.csdn.net/YXXXYX/article/details/119957061</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/30/hello-world/"/>
      <url>/2023/05/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客初始文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
